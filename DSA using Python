# LeetCode-Python-Queqtions
Q.1)Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
Sol.1) class Solution(object):
  def twoSum(self, nums, target):
		
        result_list = []
		#Two for loops for selecting two numbers and check sum equal to target or not
        for i in range(len(nums)-1):
            for j in range(i+1, len(nums)):
			#  j from i + 1; no need to check back elements it covers in i
			# Check sum == target or not
                if nums[i] + nums[j] == target:
                    result_list.append(i)
                    result_list.append(j)

        return result_list
Q2)1920. Build Array from Permutation
Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.
A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).
Example 1:
Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Sol)
def zero_based_permutation(nums):
    b=[]
    for i in nums:
        b.append(nums[i])
   
    return b

class Solution:
    
    def buildArray(self, nums: List[int]) -> List[int]:
        return zero_based_permutation(nums)
OR
class Solution:
    
    def buildArray(self, nums: List[int]) -> List[int]:
        return [nums[i] for i in nums]
Q3)1929. Concatenation of Array
Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).
Specifically, ans is the concatenation of two nums arrays.
Return the array ans.
Example 1:
Input: nums = [1,2,1]
Output: [1,2,1,1,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
- ans = [1,2,1,1,2,1]
Sol)
def concatenation_of_array(nums):
    ans=nums
    for i in range(0,len(nums)):
        ans.append(nums[i])
    return ans
class Solution:
    def getConcatenation(self, nums: List[int]) -> List[int]:
        return concatenation_of_array(nums)
OR
class Solution:
    def getConcatenation(self, nums: List[int]) -> List[int]:
        return nums*2
Q4)1480. Running Sum of 1d Array
Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).
Return the running sum of nums.
Example 1:
Input: nums = [1,2,3,4]
Output: [1,3,6,10]
SOl)
def running_sum_of_1d_array(nums):
    
    b=[]
    b.append(nums[0])
    for i in range(0,len(nums)-1):
        b.append(b[i]+nums[i+1])
    return b

class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        return running_sum_of_1d_array(nums)
