# LeetCode-Python-Queqtions
Q.1)Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
Sol.1) class Solution(object):
  def twoSum(self, nums, target):
		
        result_list = []
		#Two for loops for selecting two numbers and check sum equal to target or not
        for i in range(len(nums)-1):
            for j in range(i+1, len(nums)):
			#  j from i + 1; no need to check back elements it covers in i
			# Check sum == target or not
                if nums[i] + nums[j] == target:
                    result_list.append(i)
                    result_list.append(j)

        return result_list
Q2)1920. Build Array from Permutation
Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.
A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).
Example 1:
Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Sol)
def zero_based_permutation(nums):
    b=[]
    for i in nums:
        b.append(nums[i])
   
    return b

class Solution:
    
    def buildArray(self, nums: List[int]) -> List[int]:
        return zero_based_permutation(nums)
OR
class Solution:
    
    def buildArray(self, nums: List[int]) -> List[int]:
        return [nums[i] for i in nums]
Q3)1929. Concatenation of Array
Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).
Specifically, ans is the concatenation of two nums arrays.
Return the array ans.
Example 1:
Input: nums = [1,2,1]
Output: [1,2,1,1,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
- ans = [1,2,1,1,2,1]
Sol)
def concatenation_of_array(nums):
    ans=nums
    for i in range(0,len(nums)):
        ans.append(nums[i])
    return ans
class Solution:
    def getConcatenation(self, nums: List[int]) -> List[int]:
        return concatenation_of_array(nums)
OR
class Solution:
    def getConcatenation(self, nums: List[int]) -> List[int]:
        return nums*2
Q4)1480. Running Sum of 1d Array
Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).
Return the running sum of nums.
Example 1:
Input: nums = [1,2,3,4]
Output: [1,3,6,10]
SOl)
def running_sum_of_1d_array(nums):
    
    b=[]
    b.append(nums[0])
    for i in range(0,len(nums)-1):
        b.append(b[i]+nums[i+1])
    return b

class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        return running_sum_of_1d_array(nums)
Q5)2011. Final Value of Variable After Performing Operations
There is a programming language with only four operations and one variable X:
++X and X++ increments the value of the variable X by 1.
--X and X-- decrements the value of the variable X by 1.
Initially, the value of X is 0.
Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.
Example 1:
Input: operations = ["--X","X++","X++"]
Output: 1
Sol)
def final_value(operations):
    X=0
    for i in operations:
        if i=='--X' or i=='X--':
            X=X-1
        else:
            X=X+1
        
    return X

class Solution:
    def finalValueAfterOperations(self, operations: List[str]) -> int:
        return final_value(operations)
OR
class Solution:
    def finalValueAfterOperations(self, operations: List[str]) -> int:
        return sum(1 if '+' in o else -1 for o in operations)
Q6)1672. Richest Customer Wealth
You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the ith customer has in the jthbank. Return the wealth that the richest customer has.
A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.
Example 1:
Input: accounts = [[1,2,3],[3,2,1]]
Output: 6
Sol)
def maximum(accounts):
    b=[]
    for i in accounts:
        c=sum(i)
        b.append(c)
    b.sort()
    return b[-1]
   
class Solution:
    def maximumWealth(self, accounts: List[List[int]]) -> int:
        return maximum(accounts)
OR
class Solution:
	def maximumWealth(self, accounts: List[List[int]]) -> int:
	 	maxWealth = 0
	 	for i in range(len(accounts)):
	 		totalWealth = sum(accounts[i])
	 		maxWealth = max(maxWealth, totalWealth)
	 	return maxWealth
Q7)1470. Shuffle the Array
Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].
Return the array in the form [x1,y1,x2,y2,...,xn,yn].
Example 1:
Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Sol)
def shuffle_array(nums,n):
    b=[]
    for i in range(0,n):
        b.append(nums[i])
        b.append(nums[i+n])
    return b
class Solution:
    def shuffle(self, nums: List[int], n: int) -> List[int]:
        return shuffle_array(nums,n)
Q8)2114. Maximum Number of Words Found in Sentences
A sentence is a list of words that are separated by a single space with no leading or trailing spaces.
You are given an array of strings sentences, where each sentences[i] represents a single sentence.
Return the maximum number of words that appear in a single sentence.
Example 1:
Input: sentences = ["alice and bob love leetcode", "i think so too", "this is great thanks very much"]
Output: 6
Sol)
class Solution:
    def mostWordsFound(self, sentences: List[str]) -> int:
        b=[]
        for i in sentences:
            a=len(i.split(" "))
            b.append(a)
        return max(b)
Q9)1512. Number of Good Pairs
Given an array of integers nums, return the number of good pairs.
A pair (i, j) is called good if nums[i] == nums[j] and i < j.
Example 1:
Input: nums = [1,2,3,1,1,3]
Output: 4
Sol)
class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        count=0
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if nums[i]==nums[j]:
                    count+=1
        return count
OR
class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        
        # number of good pairs
        repeat = {}
        num = 0
        
        # for every element in nums
        for v in nums:
            
            # number of repeated digits
            if v in repeat:
                
                # count number of pairs based on duplicate values
                if repeat[v] == 1:
                    num += 1
                else:
                    num += repeat[v]
                
                # increment the number of counts
                repeat[v] += 1
            # number has not been seen before
            else:
                repeat[v] = 1
        # return
        return num
Q10)1431. Kids With the Greatest Number of Candies
There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.
Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.
Note that multiple kids can have the greatest number of candies.
Example 1:
Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 
Sol)
class Solution:
	def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:
	    b=[]
	    for i in range (len(candies)):
	        if candies[i]+extraCandies>=max(candies):
	            b.append(True)
	        else:
	            b.append(False)
	    return b
Q11)1365. How Many Numbers Are Smaller Than the Current Number
Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].
Return the answer in an array.
Example 1:
Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Sol)
class Solution:
    def smallerNumbersThanCurrent(self,nums: List[int]) -> List[int]:
        sortnums=sorted(nums)
        mapp={}
        b=[]
        for i in range(len(sortnums)):
            if sortnums[i] not in mapp:
                mapp[sortnums[i]]=i
        for i in range (len(nums)):
            b.append(mapp[nums[i]])
        return b
OR
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        count=0
        b=[]
        for i in range(len(nums)):
            for j in range(0,len(nums)):
                if nums[i]>nums[j]:
                    count+=1
            b.append(count)
            count=0
        return b
Q12)1313. Decompress Run-Length Encoded List
We are given a list nums of integers representing a list compressed with run-length encoding.
Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.
Return the decompressed list.
Example 1:
Input: nums = [1,2,3,4]
Output: [2,4,4,4]
Sol)
class Solution:
    def decompressRLElist(self, nums: List[int]) -> List[int]:
        b=[]
        for i in range(0,len(nums),2):
            a=nums[i]
            while a>0:
                b.append(nums[i+1])
                a-=1
        return b
OR            
class Solution:
    def decompressRLElist(self, nums: List[int]) -> List[int]:
        L, A = len(nums), []
        for i in range(0,L,2):
            A.extend(nums[i]*[nums[i+1]])
        return A
Q13)1720. Decode XORed Array
There is a hidden integer array arr that consists of n non-negative integers.
It was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1]. For example, if arr = [1,0,2,1], then encoded = [1,2,3].
You are given the encoded array. You are also given an integer first, that is the first element of arr, i.e. arr[0].
Return the original array arr. It can be proved that the answer exists and is unique.
Example 1:
Input: encoded = [1,2,3], first = 1
Output: [1,0,2,1]		
Sol)
class Solution:
    def decode(self, encoded: List[int], first: int) -> List[int]:
        r = [first]
        for i in encoded:
            r.append(r[-1]^i)
        return r

Q14)1389. Create Target Array in the Given Order
Given two arrays of integers nums and index. Your task is to create target array under the following rules:
Initially target array is empty.
From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.
Repeat the previous step until there are no elements to read in nums and index.
Return the target array.
It is guaranteed that the insertion operations will be valid.
Example 1:
Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]
Output: [0,4,1,3,2]
Sol)
class Solution:
    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:
        c=[]
        for i,j in zip(index,nums):
            c.insert(i,j)
        return c
OR
class Solution:
    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:
        c=[]
        for i in range (len(nums)):
            c.insert(index[i],nums[i])
        return c

Q15)1528. Shuffle String
You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.
Return the shuffled string.
Example 1:
Input: s = "codeleet", indices = [4,5,6,7,0,2,1,3]
Output: "leetcode"
Sol)
class Solution:
    def restoreString(self, s: str, indices: List[int]) -> str:
        a=['']*len(s)
        for i in range(len(s)):
            a[indices[i]] = s[i]
        a=''.join(a)
        return a
Q16)1656. Design an Ordered Stream
There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.
Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.
Implement the OrderedStream class:
OrderedStream(int n) Constructs the stream to take n values.
String[] insert(int idKey, String value) Inserts the pair (idKey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.
Example:
Input
["OrderedStream", "insert", "insert", "insert", "insert", "insert"]
[[5], [3, "ccccc"], [1, "aaaaa"], [2, "bbbbb"], [5, "eeeee"], [4, "ddddd"]]
Output
[null, [], ["aaaaa"], ["bbbbb", "ccccc"], [], ["ddddd", "eeeee"]]
Explanation
// Note that the values ordered by ID is ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"].
OrderedStream os = new OrderedStream(5);
os.insert(3, "ccccc"); // Inserts (3, "ccccc"), returns [].
os.insert(1, "aaaaa"); // Inserts (1, "aaaaa"), returns ["aaaaa"].
os.insert(2, "bbbbb"); // Inserts (2, "bbbbb"), returns ["bbbbb", "ccccc"].
os.insert(5, "eeeee"); // Inserts (5, "eeeee"), returns [].
os.insert(4, "ddddd"); // Inserts (4, "ddddd"), returns ["ddddd", "eeeee"].
// Concatentating all the chunks returned:
// [] + ["aaaaa"] + ["bbbbb", "ccccc"] + [] + ["ddddd", "eeeee"] = ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"]
// The resulting order is the same as the order above.
Sol)
class OrderedStream(object):

    def __init__(self, n):
        """
        :type n: int
        """
        self.values = [None] * n
        self.returned_min = 0
        

    def insert(self, idKey, value):
        """
        :type idKey: int
        :type value: str
        :rtype: List[str]
        """
        self.values[idKey-1] = value
        
        ret = []
		# Value not None and index in boundary of values array size
        while self.returned_min < len(self.values) and self.values[self.returned_min]:
            ret.append(self.values[self.returned_min])
			# Holding last min index returned
            self.returned_min += 1
            
        return ret
Q17)1773. Count Items Matching a Rule
You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.
The ith item is said to match the rule if one of the following is true:
ruleKey == "type" and ruleValue == typei.
ruleKey == "color" and ruleValue == colori.
ruleKey == "name" and ruleValue == namei.
Return the number of items that match the given rule.
Example 1:
Input: items = [["phone","blue","pixel"],["computer","silver","lenovo"],["phone","gold","iphone"]], ruleKey = "color", ruleValue = "silver"
Output: 1
Sol)
class Solution:
    def countMatches(self, items: List[List[str]], ruleKey: str, ruleValue: str) -> int:
        a={'type':0,'color':1,'name':2}
        c=0
        for i in items:
            if i[a[ruleKey]]==ruleValue:
                c+=1
        return c
OR
class Solution:
    def countMatches(self, items: List[List[str]], ruleKey: str, ruleValue: str) -> int:
        ruleIndex = ['type', 'color', 'name'].index(ruleKey)
        return sum(map(lambda x: x == ruleValue, [item[ruleIndex] for item in items]))
Q18)2367. Number of Arithmetic Triplets
You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:
i < j < k,
nums[j] - nums[i] == diff, and
nums[k] - nums[j] == diff.
Return the number of unique arithmetic triplets.
Example 1:
Input: nums = [0,1,4,6,7,10], diff = 3
Output: 2
Explanation:
(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.
(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3.
Sol)
class Solution:
    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:
        
        ans = 0
        n = len(nums)
        for i in range(n):
            if nums[i] + diff in nums and nums[i] + 2 * diff in nums:
                ans += 1
        
        return ans
Q19)2373. Largest Local Values in a Matrix
You are given an n x n integer matrix grid.
Generate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:
maxLocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1.
In other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.
Return the generated matrix.
Example 1:
Input: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]
Output: [[9,9],[8,6]]
Explanation: The diagram above shows the original matrix and the generated matrix.
Notice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.
Example 2:
Input: grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]
Output: [[2,2,2],[2,2,2],[2,2,2]]
Explanation: Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid.
Sol)
class Solution:
    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:

        n = len(grid)
        ans = []

        for i in range(n - 2):
            res = []

            for j in range(n - 2):
                k = []
                k.append(grid[i][j])
                k.append(grid[i][j + 1])
                k.append(grid[i][j + 2])
                k.append(grid[i + 1][j])
                k.append(grid[i + 1][j + 1])
                k.append(grid[i + 1][j + 2])
                k.append(grid[i + 2][j])
                k.append(grid[i + 2][j + 1])
                k.append(grid[i + 2][j + 2])
                m = max(k)
                res.append(m)

            ans.append(res)
        
        return ans
OR

class Solution:
    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:
	
        n = len(grid)-2
        ans = [[0]*n for _ in range(n)]

        for i in range(n):
            for j in range(n):
                ans[i][j] = max(chain(grid[i  ][j:j+3], 
                                      grid[i+1][j:j+3],
                                      grid[i+2][j:j+3]))
        
		return  ans




